##DESCRIPTION
##  Trig/Unit Circle MultiAnswer Problem 
##ENDDESCRIPTION

##KEYWORDS('trigonometry', 'unit_circle', 'fraction')

## DBsubject('Trigonometry')
## DBchapter('Trigonometric Functions of Real Number')
## DBsection('The Unit Circle')
## Date('6/3/2002')
## Author('Bayliss')
## Institution('SHS')


########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "parserMultiAnswer.pl",
   "contextFraction.pl",
   "unionTables.pl",
   #"source.pl",        # allows code to be displayed on certain sites.
   #"PGcourse.pl",      # Customization file for the course
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Fraction-NoDecimals");

@display_arc = ("\frac{\pi}{6}", "\frac{\pi}{4}", "\frac{\pi}{3}", "\frac{2 \pi}{3}", "\frac{3 \pi}{4}", "\frac{5 \pi}{6}", "\frac{3 \pi}{7}", "\frac{2 \pi}{5}", "\frac{8 \pi}{11}", "\frac{5 \pi}{8}");

@arc1 = (pi/6, pi/4, pi /3, 2*pi/3, 3*pi/4, 5*pi/6, 3*pi/7, 2*pi/5, 8*pi/11, 5*pi/8);

$choice = random(0,9,1);

$arc2 = Fraction("$arc1[$choice]");

$mp1 = MultiAnswer(Compute("$arc2-4*pi"), Compute("$arc2-2*pi"))->with(singleResult => 0, allowBlankAnswers =>1,
     checker => sub {
      my ( $correct, $student, $self ) = @_;
      my ( $f1stu, $f2stu ) = @{$student};
      my ( $f1, $f2 ) = @{$correct};
      if ( ($f1 == $f1stu && $f2 == $f2stu) ||
           ($f1 == $f2stu && $f2 == $f1stu)
         ) 
          {return [1,1];}
       else {
          if (($f1 == $f1stu && $f2 == $f1stu)
              )
               { $self->setMessage(1,"This answer is correct. ");
			     $self->setMessage(2,"This is the same as the first answer.");
				 return[1,0];}
		   elsif (($f1 == $f2stu && $f2 == $f2stu)
              )
               { $self->setMessage(2,"This answer is correct. ");
			     $self->setMessage(1,"This is the same as the first answer.");
				 return[0,1];}
           elsif ( ($f1 == $f1stu && $f2 != $f2stu)  || ($f2 == $f1stu && $f1 != $f2stu)
              )
               { $self->setMessage(1,"This answer is correct. ");
			     $self->setMessage(2,"Check this answer");
				 return[1,0]; }
          elsif ( ($f1 == $f2stu && $f1 != $f1stu)  || ($f2 == $f2stu && $f1 != $f1stu)
              )
               { $self->setMessage(2,"This answer is correct. ");
			     $self->setMessage(1,"Check this answer");
				 return[0,1]; }
          else { return[0,0]; }
		  }
		 }
	);

$mp2 = MultiAnswer(Compute("$arc2+2*pi"), Compute("$arc2+4*pi"))->with(singleResult => 0, allowBlankAnswers =>1,
 checker => sub {
      my ( $correct, $student, $self ) = @_;
      my ( $f1stu, $f2stu ) = @{$student};
      my ( $f1, $f2 ) = @{$correct};
      if ( ($f1 == $f1stu && $f2 == $f2stu) ||
           ($f1 == $f2stu && $f2 == $f1stu)
         ) 
          {return [1,1];}
       else {
          if (($f1 == $f1stu && $f2 == $f1stu)
              )
               { $self->setMessage(1,"This answer is correct. ");
			     $self->setMessage(2,"This is the same as the first answer.");
				 return[1,0];}
		   elsif (($f1 == $f2stu && $f2 == $f2stu)
              )
               { $self->setMessage(2,"This answer is correct. ");
			     $self->setMessage(1,"This is the same as the first answer.");
				 return[0,1];}
           elsif ( ($f1 == $f1stu && $f2 != $f2stu)  || ($f2 == $f1stu && $f1 != $f2stu)
              )
               { $self->setMessage(1,"This answer is correct. ");
			     $self->setMessage(2,"Check this answer");
				 return[1,0]; }
          elsif ( ($f1 == $f2stu && $f1 != $f1stu)  || ($f2 == $f2stu && $f1 != $f1stu)
              )
               { $self->setMessage(2,"This answer is correct. ");
			     $self->setMessage(1,"Check this answer");
				 return[0,1]; }
          else { return[0,0]; }
		  }
		 }
	);
##############################################################
#
#  Text
#
#

Context()->texStrings;
BEGIN_TEXT
$BR
$BR
Give 2 positive and 2 negative arc lengths that will wrap around the unit circle and fall on the same point as the given value.
$BR
$BR
$BCENTER
\{
BeginTable(border=>1, tex_border=>"2pt", spacing=>0, padding=>8).
AlignedRow( ["Negative Arc", "Negative Arc", "Given Arc", "Positive Arc", "Positive Arc"], align=>CENTER, separation=>0).
AlignedRow( [$mp1->ans_rule(10), $mp1->ans_rule(10), "\( $display_arc[$choice] \)", $mp2->ans_rule(10), $mp2->ans_rule(10)], align=>Center, separation=>0).
EndTable()
\}
$ECENTER


END_TEXT
Context()->normalStrings;

##############################################################
#
#  Answers
#
#

ANS( $mp1->cmp );
ANS( $mp2->cmp );


ENDDOCUMENT();        